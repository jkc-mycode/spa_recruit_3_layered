// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int      @id @default(autoincrement()) @map("user_id")
  email        String   @unique @map("email")
  password     String   @map("password")
  name         String   @map("name")
  age          Int      @map("age")
  gender       String   @map("gender")
  role         String   @default("APPLICANT") @map("role")
  profileImage String   @map("profile_image")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  Resume        Resume[] // 1명의 사용자는 여러 개의 이력서 작성 가능 (1:N 관계 형성)
  ResumeHistory ResumeHistory[]
  RefreshToken  RefreshToken?

  @@map("users")
}

model Resume {
  resumeId  Int      @id @default(autoincrement()) @map("resume_id")
  UserId    Int      @map("user_id") // User 테이블을 참조하는 외래키
  title     String   @map("title")
  introduce String   @map("introduce") @db.Text
  state     String   @default("APPLY") @map("state")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ResumeHistory ResumeHistory[] // 1개의 이력서에는 여러 개의 이력서 로그 기록이 존재 (1:N 관계 형성)

  // User 테이블과의 관계 설정
  User User @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("resumes")
}

model ResumeHistory {
  resumeLogId Int      @id @default(autoincrement()) @map("resume_log_id")
  ResumeId    Int      @map("resume_id") // Resume 테이블을 참조하는 외래키
  RecruiterId Int      @map("recruiter_id")
  oldState    String   @map("old_state")
  newState    String   @map("new_state")
  reason      String   @map("reason")
  createdAt   DateTime @default(now()) @map("created_at")

  // User 테이블과의 관계 설정
  User User @relation(fields: [RecruiterId], references: [userId], onDelete: Cascade)

  // Rsume 테이블과의 관계 설정
  Resume Resume @relation(fields: [ResumeId], references: [resumeId], onDelete: Cascade)

  @@map("resume_histories")
}

model RefreshToken {
  tokenId   Int      @id @default(autoincrement()) @map("token_id")
  UserId    Int      @unique @map("user_id")
  token     String   @map("token")
  ip        String   @map("ip")
  userAgent String   @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  User User @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("refresh_tokens")
}
