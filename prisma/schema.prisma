// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int        @id @default(autoincrement()) @map("user_id")
  email        String     @unique
  password     String
  name         String
  age          Int
  gender       GenderType
  role         RoleType   @default(APPLICANT)
  profileImage String     @map("profile_image")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  resume        Resume[] // 1명의 사용자는 여러 개의 이력서 작성 가능 (1:N 관계 형성)
  resumeHistory ResumeHistory[]
  refreshToken  RefreshToken?

  @@map("users")
}

enum GenderType {
  MALE
  FEMALE
}

enum RoleType {
  APPLICANT
  RECRUITER
}

model Resume {
  resumeId  Int       @id @default(autoincrement()) @map("resume_id")
  userId    Int       @map("user_id") // User 테이블을 참조하는 외래키
  title     String
  introduce String    @db.Text
  state     StateType @default(APPLY)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  resumeHistory ResumeHistory[] // 1개의 이력서에는 여러 개의 이력서 로그 기록이 존재 (1:N 관계 형성)

  // User 테이블과의 관계 설정
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("resumes")
}

enum StateType {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model ResumeHistory {
  resumeLogId Int       @id @default(autoincrement()) @map("resume_log_id")
  resumeId    Int       @map("resume_id") // Resume 테이블을 참조하는 외래키
  recruiterId Int       @map("recruiter_id")
  oldState    StateType @map("old_state")
  newState    StateType @map("new_state")
  reason      String
  createdAt   DateTime  @default(now()) @map("created_at")

  // User 테이블과의 관계 설정
  user User @relation(fields: [recruiterId], references: [userId], onDelete: Cascade)

  // Rsume 테이블과의 관계 설정
  resume Resume @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("resume_histories")
}

model RefreshToken {
  tokenId   Int      @id @default(autoincrement()) @map("token_id")
  userId    Int      @unique @map("user_id")
  token     String
  ip        String
  userAgent String   @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("refresh_tokens")
}
